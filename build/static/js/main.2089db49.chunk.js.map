{"version":3,"sources":["components/Heatmap.js","components/MonthSlider.js","App.js","index.js"],"names":["INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","props","layers","HeatmapLayer","data","id","pickable","getPosition","d","getWeight","paramState","accessor","radiusPixels","intensity","opacity","threshold","updateTriggers","console","log","initialViewState","controller","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","className","month","min","max","name","value","onChange","handleMonthChange","variant","Form","Check","inline","type","label","checked","param","dispatch","Button","size","onClick","handleClick","animate","App","useState","setMonth","setData","setAnimate","initialParam","useReducer","_","action","useEffect","fetch","mapMonth","then","response","text","Papa","parse","dynamicTyping","complete","res","timeout","setTimeout","currentMonth","clearTimeout","Heatmap","MonthSlider","event","target","parseInt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2089db49.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { StaticMap } from 'react-map-gl';\r\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\r\nimport DeckGL from '@deck.gl/react';\r\n\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoicmljaGFyZHpodWFuZyIsImEiOiJja2N5YTQxNDYwN3d5MnNwamdteWl5d3k3In0.UgE-_u7VgdxQWuJh3fdh9w';\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    // 101, 40, 3.3\r\n    longitude: 110,\r\n    latitude: 31,\r\n    zoom: 4.5,\r\n    maxZoom: 16,\r\n    pitch: 0,\r\n    bearing: 0\r\n};\r\n\r\nexport default (props) => {\r\n    \r\n    const mapStyle = 'mapbox://styles/mapbox/dark-v10';\r\n\r\n    const layers = [\r\n        new HeatmapLayer({\r\n            data: props.data,\r\n            id: 'heatmap-layer',\r\n            pickable: false,\r\n            getPosition: d => [d[0], d[1]],\r\n            getWeight: props.paramState.accessor,\r\n            radiusPixels: 25,\r\n            intensity: 3,\r\n            opacity: 0.12,\r\n            threshold: 0.05,\r\n            updateTriggers: {\r\n                getWeight: [d => d[2], d => d[3], d => d[4]]\r\n            },\r\n        })\r\n    ];\r\n\r\n    console.log(layers);\r\n\r\n    return (\r\n        <DeckGL initialViewState={INITIAL_VIEW_STATE} controller={true} layers={layers}>\r\n            <StaticMap\r\n            reuseMaps\r\n            mapStyle={mapStyle}\r\n            preventStyleDiffing={true}\r\n            mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        />\r\n        </DeckGL>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n/** TODO: Refactor this and CSS.  */\r\n\r\nexport default (props) => (\r\n    <div className=\"map-overlay\">\r\n        <h5 className=\"map-overlay-title\">Pomino V2 Pollution Map</h5>\r\n        <p className=\"map-overlay-select-month\">\r\n            Please select a month: 2016.{props.month}\r\n        </p>\r\n        <RangeSlider className=\"map-overlay-slider\" \r\n                    min={1}\r\n                    max={12}\r\n                    name=\"month\"\r\n                    value={props.month}\r\n                    onChange={props.handleMonthChange}\r\n                    variant=\"dark\"\r\n        />\r\n        <p className=\"map-overlay-select-attribute\">Please select an attribute: </p>\r\n        <Form>\r\n            <Form.Check\r\n                inline\r\n                name=\"param\"\r\n                type=\"radio\"\r\n                label=\"VCD\"\r\n                checked={props.paramState.param === 'VCD'}\r\n                onChange={() => props.dispatch({ type: 'VCD' })}\r\n                />\r\n            <Form.Check\r\n                inline\r\n                name=\"param\"\r\n                type=\"radio\"\r\n                label=\"AOD\"\r\n                checked={props.paramState.param === 'AOD'}\r\n                onChange={() => props.dispatch({ type: 'AOD' })}\r\n                />\r\n            <Form.Check\r\n                inline\r\n                name=\"param\"\r\n                type=\"radio\"\r\n                label=\"AMF\"\r\n                checked={props.paramState.param === 'AMF'}\r\n                onChange={() => props.dispatch({ type: 'AMF' })}\r\n                />\r\n        </Form>\r\n        <Button \r\n            className=\"map-overlay-botton\" \r\n            variant=\"dark\" \r\n            size=\"sm\"\r\n            onClick={props.handleClick}\r\n            value={props.animate}>{props.animate ? 'Stop': 'Loop'}</Button>\r\n    </div>\r\n);","import React, { useState, useEffect, useReducer } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nimport Heatmap from './components/Heatmap';\r\nimport MonthSlider from './components/MonthSlider';\r\n\r\nexport default function App() {\r\n    const [month, setMonth] = useState(1);\r\n\r\n    const [data, setData] = useState(null);\r\n\r\n    const [animate, setAnimate] = useState(false);\r\n\r\n    const paramReducer = (_, action) => {\r\n        switch (action.type) {\r\n            case 'VCD':\r\n                return initialParam;\r\n            case 'AOD':\r\n                return {\r\n                    param: 'AOD',\r\n                    accessor: d => d[3]\r\n                };\r\n            case 'AMF':\r\n                return {\r\n                    param: 'AMF',\r\n                    accessor: d => d[4]\r\n                };\r\n        }\r\n    }\r\n\r\n    const initialParam = {\r\n        param: 'VCD',\r\n        accessor: d => d[2]\r\n    };\r\n\r\n    const [paramState, dispatch] = useReducer(paramReducer, initialParam);\r\n\r\n    // data fetching: side effect. \r\n    useEffect(() => {\r\n        fetch(`data/${mapMonth(month)}`)\r\n            .then(response => response.text())\r\n            .then(data => Papa.parse(data, {\r\n                dynamicTyping: true,\r\n                complete: res => {\r\n                    setData(res.data);\r\n                },\r\n            }));\r\n    }, [month]);\r\n\r\n    useEffect(() => {\r\n        // Invariant: month should be a number between 1 - 12. \r\n        if (animate) {\r\n            const timeout = setTimeout(() => {\r\n                const currentMonth = month + 1;\r\n                if (currentMonth > 12) {\r\n                    setMonth(currentMonth - 12);\r\n                } else {\r\n                    setMonth(currentMonth);\r\n                }\r\n            }, 1000);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [animate, month]);\r\n\r\n    // Once the month changes, useEffect() will take over and update things.\r\n    const handleMonthChange = (event) => {\r\n        const { value } = event.target;\r\n        setMonth(parseInt(value));\r\n    };\r\n\r\n    const handleClick = () => {\r\n        setAnimate(!animate);\r\n    };\r\n\r\n    /**\r\n     * Map a value of [0, 19] to the corresponding month from '2016-01.csv' to\r\n     * '2016-12.csv'. \r\n     * Invariant: value should be a number, not a string. \r\n     */\r\n    const mapMonth = (month) => {\r\n        return month < 10 ? `2016-0${month}.csv`: `2016-${month}.csv`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Heatmap data={data} paramState={paramState} />\r\n            <MonthSlider \r\n                month={month} \r\n                animate={animate}\r\n                paramState={paramState}\r\n                handleMonthChange={handleMonthChange}\r\n                handleClick={handleClick}\r\n                dispatch={dispatch} />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}